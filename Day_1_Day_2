166 . Fraction to Reccuring Decimal :
  class Solution:
    def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        if numerator == 0:
            return "0"
        res = []
        if (numerator < 0) != (denominator < 0):
            res.append("-")
        num , den = abs(numerator),abs(denominator)
        res.append(str(num//den))
        rem = num % den
        if (rem == 0):
            return "".join(res)
        else:
            res.append(".")
            seen = {}
            while(rem != 0):
                if rem not in seen:
                    seen[rem] = len(res)
                    rem = rem * 10
                    res.append(str(rem//den))
                    rem = rem%den
                else :
                    index = seen[rem]
                    res.insert(index,"(")
                    res.append(")")
                    break
        return "".join(res)

120 . Triangle

class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        for i in range(len(triangle) - 2, -1, -1):
            for j in range(len(triangle[i])):
                triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])
        return triangle[0][0]

